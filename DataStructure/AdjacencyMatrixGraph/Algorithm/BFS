//思路：1 从图中某个顶点v出发，访问v，并置visited[index_v]=1，然后使v入队。
//2 只要队列不空，重复队头元素u出队，依次检查u的所有邻接点w，如果visited[w]==0,则访问w，并置visited[w]=1，然后使w入队。

// BFS需要设置结点访问状态数组visited[]
// 设置为全局数组可避免在D=BFS()再次申明变量
int visited[MVNum];

// 搜索之前所有结点均未被访问
// 初始化visited数组
void initvisited(AMGraph G) {
    for (int i = 0; i < G.vexNum; i++) {
        visited[i] = 0;
    }
}

// BFS：根据结点名称遍历图
void BFS(AMGraph G, char v) {
    
    int index_v = searchVertex(&G, v);
    Queue Q;
    InitQueue(Q,MVNum);
    visited[index_v] = 1;      // 标记起始节点为已访问
    
    EnQueue(Q, G.vexs[index_v]);           // 将起始节点入队
    while (!IsEmpty(Q)) {       //队不空时
        int cur = Q.front;     // 取出队首元素
        cout << Q.base[cur] << " ";     // 输出该节点
        DeQueue(Q);
        
        // 遍历该节点的所有未访问的邻接点，将其入队并标记为已访问
        for (int tmp_index = firstAdjVex(G, searchVertex(&G,Q.base[cur])); tmp_index >= 0; tmp_index = nextAdjVex(G, searchVertex(&G, Q.base[cur]), tmp_index)) {
            if (visited[tmp_index] == 0) {
                visited[tmp_index] = 1;
                EnQueue(Q, G.vexs[tmp_index]);
            }
        }
    }
    cout << endl;
}

//涉及到的队列函数
//队列的存储结构
struct Queue
{
    int front;
    int rear;
    int capacity;
    int* base;  //存储空间的基地址
};

//队列的初始化
void InitQueue(Queue& Q, int capacity)
{
    Q.base = new int[capacity];
    Q.capacity = capacity;
    Q.front = Q.rear = 0;
}

//判断队列是否为空
bool IsEmpty(Queue Q)
{
    return Q.front == Q.rear;
}

//判断队列是否已满
bool IsFull(Queue Q)
{
    return Q.rear == Q.capacity;
}

//入队操作
void EnQueue(Queue& Q, int element)
{
    if (IsFull(Q))
    {
        cout << "队列已满，无法插入元素" << endl;
        return;
    }
    else
    {
        cout << element << "已插入队列" << endl;
        Q.base[Q.rear] = element;
        Q.rear++;
    }
}

//出队操作
void DeQueue(Queue& Q)
{
    if (IsEmpty(Q))
    {
        cout << "队列为空，无法删除元素" << endl;
        return;
    }
    int i = Q.front;
    cout << Q.base[i] << "已出队" << endl;
    Q.front++;
}
