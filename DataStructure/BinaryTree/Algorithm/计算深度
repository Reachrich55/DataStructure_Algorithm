// 计算二叉树深度
int GetDepth(BiTree T) {
    int LDepth, RDepth;
    if (!T) return 0;
    else
    {
        LDepth = GetDepth(T->lchild);
        RDepth = GetDepth(T->rchild);
        int Depth = max(LDepth, RDepth);
        return Depth + 1;
    }
}

//需要使用的栈的函数
// 顺序栈的存储结构
struct SeqStack
{
    BiTree* top;
    BiTree* base;
    int capacity;
};

// 初始化
void InitStack(SeqStack& S, int capacity)
{
    //为顺序栈动态分配一个最大容量为capacity的数组空间，使base指向这段空间的基地址，即栈底。
    S.base = new BiTree[capacity];
    //栈顶指针top初始为base,表示栈空。
    S.top = S.base;
    S.capacity = capacity;
}

//入栈
void Push(SeqStack& S, BiTree e)
{
    //栈满
    if (S.top - S.base == S.capacity)
    {
        return;
    }
    *S.top = e;
    S.top++;
}

// 出栈
// 删除S的栈顶元素，用e返回其值
void Pop(SeqStack& S, BiTree& e)
{
    // 栈空
    if (S.top == S.base)
    {
        return;
    }
    S.top--;
    e = *S.top;
}
